import wollok.game.*
import math.*

object world {
	const cell_size = 40
	const size = new Vec2(x=9, y=9)
	const raysCount = 60
	const FOV = 60
	const raysAngleIncrement = (FOV/raysCount).roundUp()
	const rays = []
	const level = [ // Este es el mapa! Los 1 son paredes. El jugador inicia en medio del mapa.
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 1, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 1, 1, 0, 1],
		[1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 1, 1, 0, 0, 0, 0, 1],
		[1, 0, 0, 1, 1, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		// Pase por ese pasillo 
	]
	var angle = 45
	const walls = []
	const player = new Player(x=cell_size*1, y=cell_size*1, width=20, height=20)
	
	method getFov()= FOV
	
	method construirMapa(){
		(0..9).forEach({y => 
			(0..9).forEach({x =>
				const tipo = level.get(y).get(x)
				if (tipo == 1) {
					walls.add(new Entidad(x=cell_size*5, y=cell_size*5, width=cell_size, height=cell_size))
				}
			})
		})
	}
	
	method turnLeft() {
		angle = math.normalizeAngle(angle + 30)
		//console.println(angle)
		//player.y(player.y() - 5)
		console.println("cos and sin " + math.cos(angle) + " " + math.sin(angle))
		console.println("player- angle: "+angle+" pos: "+player.x()+" "+player.y())
	}
	method turnRight() {
		angle = math.normalizeAngle(angle - 30)
		//console.println(angle)
		//player.y(player.y() - 5)
		console.println("cos and sin " + math.cos(angle) + " " + math.sin(angle))
		console.println("player- angle: "+angle+" pos: "+player.x()+" "+player.y())
	}
	
	method forward() {
		var newX = player.x() + cell_size*math.cos(angle)
		var newY = player.y() + cell_size*math.sin(angle)
		
		
		var cell = new Vec2(x=(newX/cell_size).truncate(0), y=(newY/cell_size).truncate(0))
		if (level.get(cell.y()).get(cell.x()) == 0) {
			player.x(newX)
			player.y(newY)
		}
		
		console.println("player- angle: "+angle+" pos: "+player.x()+" "+player.y())
	}
	
	method getDistances(){
		const listOfDistances = []
		rays.forEach({ray =>
			//const ray = rays.get(0)
			const newAngle =  math.normalizeAngle(angle - (FOV/2))
			ray.x(player.x())
			ray.y(player.y())
			ray.setAngle(newAngle)
			const distance = ray.cast()
			//*math.cos(math.normalizeAngle(angle-newAngle)) // eliminar efect ojo de pez
			//console.println(distance)
			listOfDistances.add(distance)
		})
		return listOfDistances
	}
	
	method makeRays() {
		const initialAngle = math.normalizeAngle(angle - (FOV/2).truncate(0))
		(0..raysCount).forEach({elem =>
			rays.add(new Ray(angle=initialAngle, cell_size=cell_size, level=level, world_size=size, x=player.x(), y=player.y(), rayAngle=raysAngleIncrement*elem))
		})
		
	}

}

object abc {
	var lines = []
	
	method init() {
		game.width(60)
  		game.height(60)
  		game.cellSize(8)
  		game.title("Juego")
  		game.boardGround("background.png")
  		
  		world.construirMapa()
  		world.makeRays()
  		
		(59..0).forEach({elem => 
			self.makeLine(elem)
		}) 
		
		keyboard.d().onPressDo({ 
			world.turnRight()
			self.updateLines(world.getDistances())
		})
		keyboard.a().onPressDo({ 
			world.turnLeft()
			self.updateLines(world.getDistances())
		})
		keyboard.w().onPressDo({ 
			world.forward()
			self.updateLines(world.getDistances())
		})
		//game.onTick(50, "game", { self.updateLines(world.getDistances())})
		
		game.start()
	}
	
	method updateLines(listOfDistances) {
		const wallHeight = 60
		const projectionPlainDistance = (game.width() /2) / math.tan((world.getFov()/2).truncate(0))
		(0..59).forEach({elem => 
			const distance = listOfDistances.get(elem)
			const projectedWallHeight = ((wallHeight / distance ) * projectionPlainDistance)
			const imageNumber = projectedWallHeight.truncate(0).min(59)
			const line = lines.get(elem)
			//console.println(imageNumber)
			const posY = game.height().div(2) - imageNumber.div(2)
			line.image("assets/wall-" + imageNumber.toString() + ".jpg")
			line.position(game.at(line.position().x(), posY))
		})
	}
	
	method makeLine(elem){
			const profundidad = 0.randomUpTo(59).truncate(0)
			const posY = game.height().div(2) - profundidad.div(2)
			const line = new Linea(position=game.at(elem, posY), image="assets/wall-" + profundidad.toString() + ".jpg")
			lines.add(line)
			game.addVisual(line)
	}

}

class Linea {
	var property position
	var property image
}

class Entidad {
	var property x
	var property y
	var property width
	var property height
}

class Player inherits Entidad {
	var angle = 0
}

class Ray {
	const rayAngle
	const cell_size
	const level
	const world_size
	
	var property x
	var property y
	var angle
	
	method setAngle(na){
		angle = math.normalizeAngle(na + rayAngle)
	}
	
	method cast(){
		var collidePoint = new Vec2(x=x, y=y)
		var abajo = false
		var izquierda = false
		var horizontalHit = false
		var sourcePos = new Vec2(x=x, y=y)
		
		// Que direccion se mueve el rayo
		if (angle < 180) {
			abajo = true
		}
		if(angle > 90 && angle < 270){
			izquierda = true
		}
		
		// Colision horizontal
		collidePoint.y((y / cell_size).truncate(0) * cell_size)
		
		// Si apunta para abajo incrementamos una celda
		if (abajo) {
			collidePoint.y(collidePoint.y() + cell_size)
		}
		
		var adjacent = (collidePoint.y() - y) / (math.tan(angle)+0.01)
		collidePoint.x(x + adjacent)
		
		// Calculo de distancia de cada paso
		var step = new Vec2(x=cell_size / (math.tan(angle)+0.01), y=cell_size)
		
		// Si apunta hacia arriba invertimos el paso en y
		if(!abajo) {
			step.y(-step.y())
		}
		
		// El paso en X coherente ????noentiendo
		if ((izquierda && step.x() > 0) || (!izquierda && step.x() < 0)){
			step.x(-step.x())
		}

		var siguientePos = new Vec2(x=collidePoint.x(), y=collidePoint.y())
		if(!abajo) {
			siguientePos.y(siguientePos.y() - 1)
		}
		
		
		var hCollidePoint = self.stepCollide(siguientePos, step, "hor")
		
		// Colision vertical
		collidePoint.x(x)
		collidePoint.y(y)
		collidePoint.x((x / cell_size).truncate(0) * cell_size)
		
		// Si apunta hacia la derecha incrementamos una celda
		if (!izquierda) {
			collidePoint.x(collidePoint.x() + cell_size)
		}
		var opposite  = (collidePoint.x() - x) * math.tan(angle)
		collidePoint.y( y + opposite)
		// Calculo de distancia en cada paso
		step = new Vec2(x=cell_size, y=cell_size * math.tan(angle))
		
		// Si apunta hacia la izquierda invertimos el paso en x
		if (izquierda) {
			step.x(-step.x())
		}
		
		// El paso en Y coherente ????noentiendo
		if ((!abajo && step.y() > 0) || (abajo && step.y() < 0)){
			step.y(-step.y())
		}
		siguientePos = new Vec2(x=collidePoint.x(), y=collidePoint.y())
		if(izquierda) {
			siguientePos.x(siguientePos.x() - 1)
		}
		var vCollidePoint = self.stepCollide(siguientePos, step, "ver")
		
		var hDistance = sourcePos.distanceWith(hCollidePoint)
		var vDistance = sourcePos.distanceWith(vCollidePoint)

		//console.println(hDistance)
		if (hDistance < vDistance) {
			//console.println('win hor')
			return hDistance
		} else {
			//console.println('win ver')
			return vDistance
		}
		
		
	}
	
	method stepCollide(siguiente, step, type) {
	
		const cell = new Vec2(
			x=(siguiente.x().div(cell_size)).truncate(0),
			y=(siguiente.y().div(cell_size)).truncate(0)
		)
		
		
		if (self.outsideWorld(cell) || self.collideWithAnyWall(cell)) {
			//console.println(type+'| collide with: '+cell.x()+' '+cell.y())
			return siguiente
		} else {
			//console.println(type+'| !!! not collide with: '+cell.x()+' '+cell.y())
			return self.stepCollide(
				new Vec2(x=siguiente.x() + step.x(), y=siguiente.y() + step.y()),
				step,
				type
			)
		}
		
	}
	
	method outsideWorld(cell) {
		return cell.x() < 0 || cell.x() > world_size.x() || cell.y() < 0 || cell.y() > world_size.y()
	}
	
	method collideWithAnyWall(cell) {
		//return true
		return (level.get(cell.y()).get(cell.x()) != 0)
	}
}


program juego {
	abc.init()
}